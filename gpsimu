#include <Adafruit_GPS.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
Adafruit_GPS GPS(&Wire);
#define BNO055_SAMPLERATE_DELAY_MS (100) //tell the sensor to sample every 100 ms
Adafruit_BNO055 IMU = Adafruit_BNO055();    // sensor object to interact with the sesor through the object (IMU)
#define GPSECHO false
uint32_t timer = millis();
void setup(){
  Serial.begin(115200);
  //Serial.println("Adafruit I2C GPS library basic test!");
  GPS.begin(0x10);  
   IMU.begin(); 
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); 
  GPS.sendCommand(PGCMD_ANTENNA);
                         // start the sensor                         
  delay(1000);
  IMU.setExtCrystalUse(true);           // use the crystal on board of th chip to get better result
  GPS.println(PMTK_Q_RELEASE);
}

void loop(){
  char c = GPS.read();
  if (GPSECHO)
    if (c) Serial.print(c);
  if (GPS.newNMEAreceived()) {
    if (!GPS.parse(GPS.lastNMEA())) 
      return;
  }
  if (millis() - timer > 2000) {
    timer = millis(); // reset the timer
    Serial.print("\nTime(UTC): ");
    if (GPS.hour < 10) { Serial.print('0'); }
    Serial.print(GPS.hour, DEC); Serial.print(':');
    if (GPS.minute < 10) { Serial.print('0'); }
    Serial.print(GPS.minute, DEC); Serial.print(':');
    if (GPS.seconds < 10) { Serial.print('0'); }
    Serial.print(GPS.seconds, DEC); Serial.print('.');
    if (GPS.milliseconds < 10) {
      Serial.print("00");
    } else if (GPS.milliseconds > 9 && GPS.milliseconds < 100) {
      Serial.print("0");
    }
    Serial.println(GPS.milliseconds);
    Serial.print("Date: ");
    Serial.print(GPS.day, DEC); Serial.print('/');
    Serial.print(GPS.month, DEC); Serial.print("/20");
    Serial.println(GPS.year, DEC);
    GPS_DATA();
    IMU_DATA();
  }
}

void GPS_DATA(){
  if (GPS.fix) {    
    Serial.print("Latitude: ");  Serial.print(GPS.latitude, 4); Serial.println(GPS.lat);
    Serial.print("Longitude: ");  Serial.print(GPS.longitude, 4); Serial.println(GPS.lon);
    Serial.print("Altitude: "); Serial.println(GPS.altitude);
    Serial.print("Number of Locked Satellites: "); Serial.println((int)GPS.satellites);  
  }
}
  
void IMU_DATA(){
  imu:: Vector<3> Accelerometer = IMU.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
  imu:: Vector<3> GyroScope = IMU.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
  imu:: Vector<3> MagnetoMeter = IMU.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);

  Serial.print("Acceleration: ");
  Serial.print("x: ");
  Serial.print(Accelerometer.x());
  Serial.print(", ");
  Serial.print("y: ");
  Serial.print(Accelerometer.y());
  Serial.print(", ");
  Serial.print("z: ");
  Serial.println(Accelerometer.z());
  delay(1000);
  Serial.print("Angular velocity: ");
  Serial.print("x: ");
  Serial.print(GyroScope.x());
  Serial.print(", ");
  Serial.print("y: ");
  Serial.print(GyroScope.y());
  Serial.print(", ");
  Serial.print("z: ");
  Serial.println(GyroScope.z());
  delay(1000);
  Serial.print("Magnetic Fiel: ");
  Serial.print("x: ");
  Serial.print(MagnetoMeter.x());
  Serial.print(", ");
  Serial.print("y: ");
  Serial.print(MagnetoMeter.y());
  Serial.print(", ");
  Serial.print("z: ");
  Serial.println(MagnetoMeter.z());
  delay(1000);
}
